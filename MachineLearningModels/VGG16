{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CleanedCNNLesionDiagnosis.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "-U9Lt-CnVsGo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#imports for keras\n",
        "%tensorflow_version 1.x\n",
        "import keras\n",
        "import numpy as np\n",
        "from keras import backend as K\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation\n",
        "from keras.layers.core import Dense, Flatten\n",
        "from keras.optimizers import Adam \n",
        "from keras.metrics import categorical_crossentropy\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.layers.normalization import BatchNormalization\n",
        "from keras.layers.convolutional import *\n",
        "from keras.layers import Dense, Conv2D, MaxPool2D , Flatten\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.utils import plot_model"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VBj4xSKsCj2u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from numpy import array\n",
        "from numpy import argmax\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import itertools\n",
        "%matplotlib inline"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Tga1A2WIbfNM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_path = '/content/drive/My Drive/GEN_DATA_TRAIN_TEST_VAL_unziped/GEN_DATA_TRAIN_TEST_VAL/train'\n",
        "test_path = '/content/drive/My Drive/GEN_DATA_TRAIN_TEST_VAL_unziped/GEN_DATA_TRAIN_TEST_VAL/test'\n",
        "valid_path = '/content/drive/My Drive/GEN_DATA_TRAIN_TEST_VAL_unziped/GEN_DATA_TRAIN_TEST_VAL/valid'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ta-zfZQ6bmc_",
        "colab_type": "code",
        "outputId": "e6451efa-2536-4466-f6eb-ea450918cd80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        }
      },
      "source": [
        "train_batches = ImageDataGenerator().flow_from_directory(train_path, target_size=(224,224),classes=['nevus','basal_cell_carcinoma','vascular_lesion'],batch_size=10)\n",
        "test_batches = ImageDataGenerator().flow_from_directory(test_path, target_size=(224,224),classes=['nevus','basal_cell_carcinoma','vascular_lesion'],batch_size=25)\n",
        "valid_batches = ImageDataGenerator().flow_from_directory(valid_path, target_size=(224,224),classes=['nevus','basal_cell_carcinoma','vascular_lesion'],batch_size=10)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 950 images belonging to 3 classes.\n",
            "Found 119 images belonging to 3 classes.\n",
            "Found 119 images belonging to 3 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6jDkVtk8brW4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "imgs, labels = next(train_batches)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KnelcikIbtNd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# plots images with labels within jupyter notebook\n",
        "def plots(ims, figsize=(12,6), rows=1, interp=False, titles=None):\n",
        "    if type(ims[0]) is np.ndarray:\n",
        "        ims = np.array(ims).astype(np.uint8)\n",
        "        if (ims.shape[-1] != 3):\n",
        "            ims = ims.transpose((0,2,3,1))\n",
        "    f = plt.figure(figsize=figsize)\n",
        "    cols = len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows + 1\n",
        "    for i in range(len(ims)):\n",
        "        sp = f.add_subplot(rows, cols, i+1)\n",
        "        sp.axis('Off')\n",
        "        if titles is not None:\n",
        "            sp.set_title(titles[i], fontsize=16)\n",
        "        plt.imshow(ims[i], interpolation=None if interp else 'none')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V8NoIyAdbvm7",
        "colab_type": "code",
        "outputId": "696c62ea-18b3-4ddc-c492-9be6346d3901",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "plots(imgs, titles=labels)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/matplotlib/text.py:1165: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
            "  if s != self._text:\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 10 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PKgKCGY-bxc5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n",
        "model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n",
        "model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(units=4096,activation=\"relu\"))\n",
        "model.add(Dense(units=4096,activation=\"relu\"))\n",
        "model.add(Dense(units=3, activation=\"softmax\"))\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ein2JCB2oxK0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras.optimizers import Adam\n",
        "opt = Adam(lr=0.001)\n",
        "model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-mCeOQgsb1O8",
        "colab_type": "code",
        "outputId": "1f773e63-416f-445a-8631-b6d860eaa991",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
        "checkpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\n",
        "early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')\n",
        "hist = model.fit_generator(steps_per_epoch=10,generator=train_batches, validation_data= valid_batches, validation_steps=2,epochs=100,callbacks=[checkpoint,early])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "10/10 [==============================] - 27s 3s/step - loss: 1.0502 - accuracy: 0.4100 - val_loss: 0.8737 - val_accuracy: 0.7000\n",
            "Epoch 2/100\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/keras/callbacks/callbacks.py:707: RuntimeWarning: Can save best model only with val_acc available, skipping.\n",
            "  'skipping.' % (self.monitor), RuntimeWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/keras/callbacks/callbacks.py:846: RuntimeWarning: Early stopping conditioned on metric `val_acc` which is not available. Available metrics are: val_loss,val_accuracy,loss,accuracy\n",
            "  (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "10/10 [==============================] - 31s 3s/step - loss: 0.9771 - accuracy: 0.5900 - val_loss: 0.7740 - val_accuracy: 0.6000\n",
            "Epoch 3/100\n",
            "10/10 [==============================] - 23s 2s/step - loss: 0.9275 - accuracy: 0.6100 - val_loss: 1.2130 - val_accuracy: 0.4500\n",
            "Epoch 4/100\n",
            "10/10 [==============================] - 24s 2s/step - loss: 1.1814 - accuracy: 0.4000 - val_loss: 1.0612 - val_accuracy: 0.6000\n",
            "Epoch 5/100\n",
            "10/10 [==============================] - 22s 2s/step - loss: 1.0699 - accuracy: 0.3600 - val_loss: 1.0835 - val_accuracy: 0.3500\n",
            "Epoch 6/100\n",
            "10/10 [==============================] - 26s 3s/step - loss: 1.0046 - accuracy: 0.4900 - val_loss: 0.9371 - val_accuracy: 0.2105\n",
            "Epoch 7/100\n",
            "10/10 [==============================] - 24s 2s/step - loss: 1.0142 - accuracy: 0.3700 - val_loss: 0.8822 - val_accuracy: 0.5000\n",
            "Epoch 8/100\n",
            "10/10 [==============================] - 26s 3s/step - loss: 0.9239 - accuracy: 0.5900 - val_loss: 1.0426 - val_accuracy: 0.3500\n",
            "Epoch 9/100\n",
            "10/10 [==============================] - 19s 2s/step - loss: 1.0947 - accuracy: 0.4000 - val_loss: 0.9040 - val_accuracy: 0.4500\n",
            "Epoch 10/100\n",
            "10/10 [==============================] - 8s 813ms/step - loss: 1.0771 - accuracy: 0.3500 - val_loss: 0.9207 - val_accuracy: 0.6500\n",
            "Epoch 11/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 1.0670 - accuracy: 0.4100 - val_loss: 1.1613 - val_accuracy: 0.2000\n",
            "Epoch 12/100\n",
            "10/10 [==============================] - 3s 337ms/step - loss: 1.0345 - accuracy: 0.4100 - val_loss: 1.1095 - val_accuracy: 0.4211\n",
            "Epoch 13/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.9686 - accuracy: 0.4700 - val_loss: 0.8182 - val_accuracy: 0.4500\n",
            "Epoch 14/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.9415 - accuracy: 0.5700 - val_loss: 1.0989 - val_accuracy: 0.5500\n",
            "Epoch 15/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.7241 - accuracy: 0.6400 - val_loss: 0.9066 - val_accuracy: 0.6000\n",
            "Epoch 16/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.6550 - accuracy: 0.6500 - val_loss: 0.6807 - val_accuracy: 0.6500\n",
            "Epoch 17/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.7848 - accuracy: 0.6800 - val_loss: 0.5526 - val_accuracy: 0.6000\n",
            "Epoch 18/100\n",
            "10/10 [==============================] - 3s 337ms/step - loss: 0.6297 - accuracy: 0.7300 - val_loss: 0.8066 - val_accuracy: 0.7368\n",
            "Epoch 19/100\n",
            "10/10 [==============================] - 3s 334ms/step - loss: 0.5777 - accuracy: 0.7200 - val_loss: 0.7035 - val_accuracy: 0.8000\n",
            "Epoch 20/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.4649 - accuracy: 0.8100 - val_loss: 0.6347 - val_accuracy: 0.8000\n",
            "Epoch 21/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.6045 - accuracy: 0.7300 - val_loss: 0.5908 - val_accuracy: 0.6500\n",
            "Epoch 22/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.5907 - accuracy: 0.6500 - val_loss: 0.4446 - val_accuracy: 0.7000\n",
            "Epoch 23/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.5073 - accuracy: 0.7500 - val_loss: 0.3598 - val_accuracy: 0.9500\n",
            "Epoch 24/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.4522 - accuracy: 0.8800 - val_loss: 0.9383 - val_accuracy: 0.7895\n",
            "Epoch 25/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3604 - accuracy: 0.8700 - val_loss: 0.4292 - val_accuracy: 0.9500\n",
            "Epoch 26/100\n",
            "10/10 [==============================] - 3s 337ms/step - loss: 0.3636 - accuracy: 0.8600 - val_loss: 0.3689 - val_accuracy: 0.7500\n",
            "Epoch 27/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3172 - accuracy: 0.8800 - val_loss: 0.1986 - val_accuracy: 0.9000\n",
            "Epoch 28/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3107 - accuracy: 0.8800 - val_loss: 0.0912 - val_accuracy: 0.8500\n",
            "Epoch 29/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.2076 - accuracy: 0.9200 - val_loss: 0.0660 - val_accuracy: 1.0000\n",
            "Epoch 30/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.3204 - accuracy: 0.8800 - val_loss: 0.4997 - val_accuracy: 0.7895\n",
            "Epoch 31/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2670 - accuracy: 0.9100 - val_loss: 1.0369 - val_accuracy: 0.6500\n",
            "Epoch 32/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.5745 - accuracy: 0.8100 - val_loss: 0.3831 - val_accuracy: 0.8500\n",
            "Epoch 33/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.3831 - accuracy: 0.8400 - val_loss: 0.3444 - val_accuracy: 0.9500\n",
            "Epoch 34/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2723 - accuracy: 0.9100 - val_loss: 0.3075 - val_accuracy: 0.8500\n",
            "Epoch 35/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3806 - accuracy: 0.8200 - val_loss: 0.4525 - val_accuracy: 0.8500\n",
            "Epoch 36/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3382 - accuracy: 0.8800 - val_loss: 0.2160 - val_accuracy: 0.7895\n",
            "Epoch 37/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2562 - accuracy: 0.8900 - val_loss: 0.3349 - val_accuracy: 0.9000\n",
            "Epoch 38/100\n",
            "10/10 [==============================] - 3s 337ms/step - loss: 0.3206 - accuracy: 0.8800 - val_loss: 0.1301 - val_accuracy: 0.9500\n",
            "Epoch 39/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2627 - accuracy: 0.9100 - val_loss: 0.3102 - val_accuracy: 0.8000\n",
            "Epoch 40/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2245 - accuracy: 0.9100 - val_loss: 0.0613 - val_accuracy: 0.9500\n",
            "Epoch 41/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2723 - accuracy: 0.9400 - val_loss: 0.2613 - val_accuracy: 0.9500\n",
            "Epoch 42/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.2225 - accuracy: 0.9100 - val_loss: 0.1431 - val_accuracy: 0.9474\n",
            "Epoch 43/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3308 - accuracy: 0.8700 - val_loss: 0.2271 - val_accuracy: 0.9500\n",
            "Epoch 44/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2776 - accuracy: 0.8700 - val_loss: 0.0740 - val_accuracy: 1.0000\n",
            "Epoch 45/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.1695 - accuracy: 0.9300 - val_loss: 0.0457 - val_accuracy: 0.9000\n",
            "Epoch 46/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.2614 - accuracy: 0.8700 - val_loss: 0.0870 - val_accuracy: 0.9500\n",
            "Epoch 47/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2545 - accuracy: 0.8800 - val_loss: 0.4758 - val_accuracy: 0.8000\n",
            "Epoch 48/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3148 - accuracy: 0.9100 - val_loss: 0.0448 - val_accuracy: 1.0000\n",
            "Epoch 49/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2852 - accuracy: 0.9100 - val_loss: 0.1813 - val_accuracy: 0.9000\n",
            "Epoch 50/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3442 - accuracy: 0.8900 - val_loss: 0.3031 - val_accuracy: 0.8000\n",
            "Epoch 51/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2671 - accuracy: 0.8800 - val_loss: 0.1091 - val_accuracy: 0.9000\n",
            "Epoch 52/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3217 - accuracy: 0.8700 - val_loss: 0.3007 - val_accuracy: 0.9500\n",
            "Epoch 53/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3378 - accuracy: 0.9100 - val_loss: 0.3852 - val_accuracy: 0.9500\n",
            "Epoch 54/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2753 - accuracy: 0.9400 - val_loss: 0.2957 - val_accuracy: 0.9474\n",
            "Epoch 55/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2649 - accuracy: 0.8900 - val_loss: 0.2238 - val_accuracy: 0.9500\n",
            "Epoch 56/100\n",
            "10/10 [==============================] - 3s 343ms/step - loss: 0.2704 - accuracy: 0.9200 - val_loss: 0.4481 - val_accuracy: 0.7500\n",
            "Epoch 57/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.1988 - accuracy: 0.9100 - val_loss: 0.0576 - val_accuracy: 0.9500\n",
            "Epoch 58/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3164 - accuracy: 0.9200 - val_loss: 0.3871 - val_accuracy: 0.8000\n",
            "Epoch 59/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.4388 - accuracy: 0.8200 - val_loss: 0.1213 - val_accuracy: 1.0000\n",
            "Epoch 60/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3063 - accuracy: 0.8800 - val_loss: 0.2079 - val_accuracy: 0.9474\n",
            "Epoch 61/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2193 - accuracy: 0.9100 - val_loss: 0.3385 - val_accuracy: 0.8500\n",
            "Epoch 62/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3907 - accuracy: 0.8600 - val_loss: 0.4705 - val_accuracy: 0.6500\n",
            "Epoch 63/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3354 - accuracy: 0.8600 - val_loss: 0.0581 - val_accuracy: 0.9500\n",
            "Epoch 64/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3758 - accuracy: 0.8500 - val_loss: 0.4220 - val_accuracy: 0.7500\n",
            "Epoch 65/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.3450 - accuracy: 0.8700 - val_loss: 0.1427 - val_accuracy: 0.9000\n",
            "Epoch 66/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2531 - accuracy: 0.9300 - val_loss: 0.6048 - val_accuracy: 0.8421\n",
            "Epoch 67/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2037 - accuracy: 0.9100 - val_loss: 0.4353 - val_accuracy: 0.8500\n",
            "Epoch 68/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.1586 - accuracy: 0.9600 - val_loss: 0.0540 - val_accuracy: 1.0000\n",
            "Epoch 69/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.2355 - accuracy: 0.9100 - val_loss: 0.1048 - val_accuracy: 0.9000\n",
            "Epoch 70/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2064 - accuracy: 0.9200 - val_loss: 0.0361 - val_accuracy: 0.9500\n",
            "Epoch 71/100\n",
            "10/10 [==============================] - 3s 343ms/step - loss: 0.1925 - accuracy: 0.9300 - val_loss: 0.6839 - val_accuracy: 0.6500\n",
            "Epoch 72/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.4723 - accuracy: 0.8600 - val_loss: 0.3672 - val_accuracy: 0.8421\n",
            "Epoch 73/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.2518 - accuracy: 0.9200 - val_loss: 0.2266 - val_accuracy: 0.9500\n",
            "Epoch 74/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2754 - accuracy: 0.8900 - val_loss: 0.1086 - val_accuracy: 0.9500\n",
            "Epoch 75/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.2433 - accuracy: 0.8900 - val_loss: 0.1836 - val_accuracy: 0.9500\n",
            "Epoch 76/100\n",
            "10/10 [==============================] - 3s 338ms/step - loss: 0.1565 - accuracy: 0.9600 - val_loss: 0.4442 - val_accuracy: 0.8500\n",
            "Epoch 77/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.1822 - accuracy: 0.9200 - val_loss: 0.1285 - val_accuracy: 1.0000\n",
            "Epoch 78/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.2877 - accuracy: 0.9000 - val_loss: 0.1544 - val_accuracy: 0.8947\n",
            "Epoch 79/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3788 - accuracy: 0.8600 - val_loss: 0.0766 - val_accuracy: 0.9500\n",
            "Epoch 80/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.3259 - accuracy: 0.8900 - val_loss: 0.2779 - val_accuracy: 0.8000\n",
            "Epoch 81/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2023 - accuracy: 0.9300 - val_loss: 0.4034 - val_accuracy: 0.8000\n",
            "Epoch 82/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.1911 - accuracy: 0.9200 - val_loss: 0.6315 - val_accuracy: 0.8500\n",
            "Epoch 83/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.1986 - accuracy: 0.9300 - val_loss: 0.0890 - val_accuracy: 0.9000\n",
            "Epoch 84/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.1760 - accuracy: 0.9100 - val_loss: 0.0291 - val_accuracy: 0.9474\n",
            "Epoch 85/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.1860 - accuracy: 0.9300 - val_loss: 0.0819 - val_accuracy: 0.9500\n",
            "Epoch 86/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3833 - accuracy: 0.8900 - val_loss: 0.3965 - val_accuracy: 0.9500\n",
            "Epoch 87/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.5491 - accuracy: 0.8300 - val_loss: 0.5963 - val_accuracy: 0.7500\n",
            "Epoch 88/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.3322 - accuracy: 0.8700 - val_loss: 0.1352 - val_accuracy: 0.9500\n",
            "Epoch 89/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.3388 - accuracy: 0.8600 - val_loss: 0.4050 - val_accuracy: 0.8500\n",
            "Epoch 90/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.3476 - accuracy: 0.8300 - val_loss: 0.1788 - val_accuracy: 0.8947\n",
            "Epoch 91/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.1840 - accuracy: 0.9400 - val_loss: 0.1697 - val_accuracy: 0.9500\n",
            "Epoch 92/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.2179 - accuracy: 0.9100 - val_loss: 0.2863 - val_accuracy: 0.9000\n",
            "Epoch 93/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.2760 - accuracy: 0.9000 - val_loss: 0.2212 - val_accuracy: 0.8500\n",
            "Epoch 94/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.1795 - accuracy: 0.9300 - val_loss: 0.3606 - val_accuracy: 0.8500\n",
            "Epoch 95/100\n",
            "10/10 [==============================] - 3s 337ms/step - loss: 0.6036 - accuracy: 0.7400 - val_loss: 0.3820 - val_accuracy: 0.5500\n",
            "Epoch 96/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.4414 - accuracy: 0.7700 - val_loss: 0.3403 - val_accuracy: 0.7895\n",
            "Epoch 97/100\n",
            "10/10 [==============================] - 3s 340ms/step - loss: 0.2270 - accuracy: 0.9000 - val_loss: 0.3260 - val_accuracy: 0.8500\n",
            "Epoch 98/100\n",
            "10/10 [==============================] - 3s 339ms/step - loss: 0.1163 - accuracy: 0.9600 - val_loss: 0.1403 - val_accuracy: 0.9500\n",
            "Epoch 99/100\n",
            "10/10 [==============================] - 3s 341ms/step - loss: 0.1891 - accuracy: 0.9400 - val_loss: 0.0833 - val_accuracy: 0.9500\n",
            "Epoch 100/100\n",
            "10/10 [==============================] - 3s 342ms/step - loss: 0.2334 - accuracy: 0.9300 - val_loss: 0.2181 - val_accuracy: 0.9000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i7Rw0tfOb4Gw",
        "colab_type": "code",
        "outputId": "4392f501-f5f6-4e47-ae85-8315f0c6dd62",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 127
        }
      },
      "source": [
        "test_imgs, test_labels = next(test_batches)\n",
        "plots(test_imgs,titles=test_labels)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/matplotlib/text.py:1165: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
            "  if s != self._text:\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 25 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a9le-pxob6ma",
        "colab_type": "code",
        "outputId": "95dca17a-a213-445a-8702-6ceefe1df5ae",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "source": [
        "# test_labels = test_labels[:,0]\n",
        "test_labels"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [1., 0., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [1., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EfqDVhLrb8j_",
        "colab_type": "code",
        "outputId": "88aea190-0119-4b9f-bbca-fb6e1e561502",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "predictions = model.predict_generator(test_batches,steps=1,verbose=1)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\r1/1 [==============================] - 0s 223ms/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5aK8ECNS9eVP",
        "colab_type": "code",
        "outputId": "5256dff2-37f8-48b8-ce52-af0fb3c1d9f2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 189
        }
      },
      "source": [
        "# confusion_matrix(\n",
        "#     test_labels.values.argmax(axis=1), predictions.argmax(axis=1))"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-75f92eb944a9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m confusion_matrix(\n\u001b[0;32m----> 2\u001b[0;31m     test_labels.values.argmax(axis=1), predictions.argmax(axis=1))\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'values'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bgW-DrGTGnJf",
        "colab_type": "code",
        "outputId": "79201a2f-dd75-4ef0-a0a7-f8bd7909ae64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        }
      },
      "source": [
        "\n",
        "# cm = confusion_matrix(test_labels,predictions[:,0])\n",
        "cm = confusion_matrix(test_labels,predictions)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-43-47b8230e9bd4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_labels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(y_true, y_pred, labels, sample_weight, normalize)\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m     \"\"\"\n\u001b[0;32m--> 268\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"binary\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"multiclass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s is not supported\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m         raise ValueError(\"Classification metrics can't handle a mix of {0} \"\n\u001b[0;32m---> 90\u001b[0;31m                          \"and {1} targets\".format(type_true, type_pred))\n\u001b[0m\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m     \u001b[0;31m# We can't have more than one value on y_type => The set is no more needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of multilabel-indicator and continuous-multioutput targets"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BJ65I1aLGts2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def plot_confusion_matrix(cm, classes,\n",
        "                          normalize=False,\n",
        "                          title='Confusion matrix',\n",
        "                          cmap=plt.cm.Blues):\n",
        "    \"\"\"\n",
        "    This function prints and plots the confusion matrix.\n",
        "    Normalization can be applied by setting `normalize=True`.\n",
        "    \"\"\"\n",
        "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
        "    plt.title(title)\n",
        "    plt.colorbar()\n",
        "    tick_marks = np.arange(len(classes))\n",
        "    plt.xticks(tick_marks, classes, rotation=45)\n",
        "    plt.yticks(tick_marks, classes)\n",
        "\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        print(\"Normalized confusion matrix\")\n",
        "    else:\n",
        "        print('Confusion matrix, without normalization')\n",
        "\n",
        "    print(cm)\n",
        "\n",
        "    thresh = cm.max() / 2.\n",
        "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
        "        plt.text(j, i, cm[i, j],\n",
        "                 horizontalalignment=\"center\",\n",
        "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I5thkIwvGyPK",
        "colab_type": "code",
        "outputId": "a2e6f2e5-beef-4c69-ccbc-fdd09cef9169",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 189
        }
      },
      "source": [
        "#batch 1 (25)\n",
        "cm_plot_labels = ['nevus','basal_cell_carcinoma','vascular_lesion']\n",
        "plot_confusion_matrix(cm,cm_plot_labels,title=\"ConfusionMatrix\")"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-40-bd8bbfa5af17>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcm_plot_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'nevus'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'basal_cell_carcinoma'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'vascular_lesion'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplot_confusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcm_plot_labels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ConfusionMatrix\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'cm' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ubz4K8Ew7WUz",
        "colab_type": "code",
        "outputId": "e772aa61-0347-4581-b0d7-a55507892632",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        }
      },
      "source": [
        "#batch 2 (50)\n",
        "cm_plot_labels = ['nevus','basal_cell_carcinoma','vascular_lesion']\n",
        "plot_confusion_matrix(cm,cm_plot_labels,title=\"ConfusionMatrix\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Confusion matrix, without normalization\n",
            "[[ 0  8]\n",
            " [ 0 17]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}
